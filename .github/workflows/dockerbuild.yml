name: Testing dockerbuild
on:
  push:
    paths:
      - 'Dockerfile'
      - 'dockerbuild/*'
      - 'docker-compose*.yml'
      - '.github/workflows/dockerbuild.yml'
  pull_request:
    paths:
      - 'Dockerfile'
      - 'dockerbuild/*'
      - 'docker-compose*.yml'
      - '.github/workflows/dockerbuild.yml'
  release:
    types: [ published ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  dockerbuild:
    name: dockerbuild
    runs-on: ${{ matrix.operating-system }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ '7.4', '8.0', '8.1' ]
        db: [ pgsql ]
        group: [ admin01 ]
        include:
          - db: pgsql
            database_url: postgres://dbuser:secret@127.0.0.1:15432/eccubedb
            database_server_version: 14
          - group: admin01
            app_env: 'codeception'
          - php: '7.4'
            tag: '7.4-apache'
          - php: '8.0'
            tag: '8.0-apache'
          - php: '8.1'
            tag: '8.1-apache'
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: docker build
        run: docker compose build

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Setup PHP
        uses: nanasess/setup-php@master
        with:
          php-version: ${{ matrix.php }}

      - name: composer install
        run: composer install --dev --no-interaction -o --apcu-autoloader
      - name: Setup to EC-CUBE
        env:
          APP_ENV: ${{ matrix.app_env }}
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          TAG: ${{ matrix.tag }}
        run: |
          docker-compose build --build-arg TAG=${TAG} ec-cube
          docker compose -f docker-compose.yml -f docker-compose.pgsql.yml up -d --wait
          sed -i 's!APP_ENV: "dev"!APP_ENV: "prod"!g' docker-compose.yml
          docker compose -f docker-compose.yml -f docker-compose.pgsql.yml up -d --wait

      - name: setup-chromedriver
        uses: nanasess/setup-chromedriver@master

      - name: Run chromedriver
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          echo ">>> Started chrome-driver"
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          echo ">>> Started xvfb"

      - name: Codeception
        env:
          APP_ENV: ${{ matrix.app_env }}
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          MAILER_URL: 'smtp://127.0.0.1:1025'
          GROUP: ${{ matrix.group }}
          SYMFONY_DEPRECATIONS_HELPER: weak
        run: |
          echo "APP_ENV=${APP_ENV}" > .env
          vendor/bin/codecept -vvv run acceptance --env chrome,github_action_docker -g ${GROUP}
      ## see https://docs.github.com/ja/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#publishing-a-package-using-an-action
      - name: Login to GitHub Container Registry
        if: success()
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        if: success()
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-php-${{ matrix.tag }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        if: success()
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: TAG=${{ matrix.tag }}
      - name: Upload evidence
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: codeception-${{ matrix.group }}-evidence
          path: codeception/_output/
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: codeception-${{ matrix.group }}-logs
          path: var/log/
